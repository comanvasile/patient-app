//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Policlinica.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PoliclinicaDataContext : DbContext
    {
        public PoliclinicaDataContext()
            : base("name=PoliclinicaDataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adresa> Adresa { get; set; }
        public virtual DbSet<AsistentMedical> AsistentMedical { get; set; }
        public virtual DbSet<BonuriFiscale> BonuriFiscale { get; set; }
        public virtual DbSet<Departament> Departament { get; set; }
        public virtual DbSet<FunctiiDepartament> FunctiiDepartament { get; set; }
        public virtual DbSet<LoginUser> LoginUser { get; set; }
        public virtual DbSet<Medic> Medic { get; set; }
        public virtual DbSet<OrarUnitateMedicala> OrarUnitateMedicala { get; set; }
        public virtual DbSet<OrarUtilizatori> OrarUtilizatori { get; set; }
        public virtual DbSet<Pacient> Pacient { get; set; }
        public virtual DbSet<ProceduriMedic> ProceduriMedic { get; set; }
        public virtual DbSet<ProgramariServicii> ProgramariServicii { get; set; }
        public virtual DbSet<RaportMedical> RaportMedical { get; set; }
        public virtual DbSet<Roluri> Roluri { get; set; }
        public virtual DbSet<ServiciiMedicale> ServiciiMedicale { get; set; }
        public virtual DbSet<Specialitati> Specialitati { get; set; }
        public virtual DbSet<UnitateMedicala> UnitateMedicala { get; set; }
        public virtual DbSet<Utilizatori> Utilizatori { get; set; }
        public virtual DbSet<LoginPacient> LoginPacient { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual ObjectResult<LoginUserPoliclinica_Result> LoginUserPoliclinica(string userName, byte[] parola)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginUserPoliclinica_Result>("LoginUserPoliclinica", userNameParameter, parolaParameter);
        }
    
        public virtual ObjectResult<LoadUtilizatori_Result> LoadUtilizatori(Nullable<int> unitateMedicalaId)
        {
            var unitateMedicalaIdParameter = unitateMedicalaId.HasValue ?
                new ObjectParameter("unitateMedicalaId", unitateMedicalaId) :
                new ObjectParameter("unitateMedicalaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadUtilizatori_Result>("LoadUtilizatori", unitateMedicalaIdParameter);
        }
    
        public virtual int InsertMedicSpecialitati(Nullable<int> medicId, Nullable<int> specialitateId)
        {
            var medicIdParameter = medicId.HasValue ?
                new ObjectParameter("medicId", medicId) :
                new ObjectParameter("medicId", typeof(int));
    
            var specialitateIdParameter = specialitateId.HasValue ?
                new ObjectParameter("specialitateId", specialitateId) :
                new ObjectParameter("specialitateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMedicSpecialitati", medicIdParameter, specialitateIdParameter);
        }
    
        public virtual int DeleteFromMedicSpecialitati(Nullable<int> medicId)
        {
            var medicIdParameter = medicId.HasValue ?
                new ObjectParameter("medicId", medicId) :
                new ObjectParameter("medicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFromMedicSpecialitati", medicIdParameter);
        }
    
        public virtual ObjectResult<LoadSpecialitatiUnitate_Result> LoadSpecialitatiUnitate(Nullable<int> unitateMedicalaId)
        {
            var unitateMedicalaIdParameter = unitateMedicalaId.HasValue ?
                new ObjectParameter("unitateMedicalaId", unitateMedicalaId) :
                new ObjectParameter("unitateMedicalaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadSpecialitatiUnitate_Result>("LoadSpecialitatiUnitate", unitateMedicalaIdParameter);
        }
    
        public virtual ObjectResult<LoadMediciBySpecialitateId_Result> LoadMediciBySpecialitateId(Nullable<int> specialitateId, Nullable<int> unitateId)
        {
            var specialitateIdParameter = specialitateId.HasValue ?
                new ObjectParameter("specialitateId", specialitateId) :
                new ObjectParameter("specialitateId", typeof(int));
    
            var unitateIdParameter = unitateId.HasValue ?
                new ObjectParameter("unitateId", unitateId) :
                new ObjectParameter("unitateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadMediciBySpecialitateId_Result>("LoadMediciBySpecialitateId", specialitateIdParameter, unitateIdParameter);
        }
    
        public virtual ObjectResult<LoadPacientiMedic_Result> LoadPacientiMedic(Nullable<bool> azi, Nullable<int> unitateMedicalaId, Nullable<int> medicId)
        {
            var aziParameter = azi.HasValue ?
                new ObjectParameter("azi", azi) :
                new ObjectParameter("azi", typeof(bool));
    
            var unitateMedicalaIdParameter = unitateMedicalaId.HasValue ?
                new ObjectParameter("unitateMedicalaId", unitateMedicalaId) :
                new ObjectParameter("unitateMedicalaId", typeof(int));
    
            var medicIdParameter = medicId.HasValue ?
                new ObjectParameter("medicId", medicId) :
                new ObjectParameter("medicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadPacientiMedic_Result>("LoadPacientiMedic", aziParameter, unitateMedicalaIdParameter, medicIdParameter);
        }
    
        public virtual ObjectResult<LoadIstoricPacient_Result> LoadIstoricPacient(Nullable<int> pacientId)
        {
            var pacientIdParameter = pacientId.HasValue ?
                new ObjectParameter("pacientId", pacientId) :
                new ObjectParameter("pacientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadIstoricPacient_Result>("LoadIstoricPacient", pacientIdParameter);
        }
    
        public virtual int InsertProgramariServicii(Nullable<int> pacientId, Nullable<int> receptionerId, Nullable<System.DateTime> dataProgramare, Nullable<bool> realizata, string competenta, Nullable<decimal> pret, Nullable<int> durata, Nullable<int> unitateMedicalaId, Nullable<int> medicId, Nullable<int> specialitateId)
        {
            var pacientIdParameter = pacientId.HasValue ?
                new ObjectParameter("pacientId", pacientId) :
                new ObjectParameter("pacientId", typeof(int));
    
            var receptionerIdParameter = receptionerId.HasValue ?
                new ObjectParameter("receptionerId", receptionerId) :
                new ObjectParameter("receptionerId", typeof(int));
    
            var dataProgramareParameter = dataProgramare.HasValue ?
                new ObjectParameter("dataProgramare", dataProgramare) :
                new ObjectParameter("dataProgramare", typeof(System.DateTime));
    
            var realizataParameter = realizata.HasValue ?
                new ObjectParameter("realizata", realizata) :
                new ObjectParameter("realizata", typeof(bool));
    
            var competentaParameter = competenta != null ?
                new ObjectParameter("competenta", competenta) :
                new ObjectParameter("competenta", typeof(string));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("pret", pret) :
                new ObjectParameter("pret", typeof(decimal));
    
            var durataParameter = durata.HasValue ?
                new ObjectParameter("durata", durata) :
                new ObjectParameter("durata", typeof(int));
    
            var unitateMedicalaIdParameter = unitateMedicalaId.HasValue ?
                new ObjectParameter("unitateMedicalaId", unitateMedicalaId) :
                new ObjectParameter("unitateMedicalaId", typeof(int));
    
            var medicIdParameter = medicId.HasValue ?
                new ObjectParameter("medicId", medicId) :
                new ObjectParameter("medicId", typeof(int));
    
            var specialitateIdParameter = specialitateId.HasValue ?
                new ObjectParameter("specialitateId", specialitateId) :
                new ObjectParameter("specialitateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProgramariServicii", pacientIdParameter, receptionerIdParameter, dataProgramareParameter, realizataParameter, competentaParameter, pretParameter, durataParameter, unitateMedicalaIdParameter, medicIdParameter, specialitateIdParameter);
        }
    
        public virtual ObjectResult<Cheltuieli_Result> Cheltuieli(Nullable<int> an, Nullable<int> luna, Nullable<int> id_unitate)
        {
            var anParameter = an.HasValue ?
                new ObjectParameter("an", an) :
                new ObjectParameter("an", typeof(int));
    
            var lunaParameter = luna.HasValue ?
                new ObjectParameter("luna", luna) :
                new ObjectParameter("luna", typeof(int));
    
            var id_unitateParameter = id_unitate.HasValue ?
                new ObjectParameter("id_unitate", id_unitate) :
                new ObjectParameter("id_unitate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cheltuieli_Result>("Cheltuieli", anParameter, lunaParameter, id_unitateParameter);
        }
    
        public virtual ObjectResult<Venituri_Result> Venituri(Nullable<int> an, Nullable<int> luna, Nullable<int> id_unitate)
        {
            var anParameter = an.HasValue ?
                new ObjectParameter("an", an) :
                new ObjectParameter("an", typeof(int));
    
            var lunaParameter = luna.HasValue ?
                new ObjectParameter("luna", luna) :
                new ObjectParameter("luna", typeof(int));
    
            var id_unitateParameter = id_unitate.HasValue ?
                new ObjectParameter("id_unitate", id_unitate) :
                new ObjectParameter("id_unitate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Venituri_Result>("Venituri", anParameter, lunaParameter, id_unitateParameter);
        }
    
        public virtual ObjectResult<SalariiMedic_Result> SalariiMedic(Nullable<int> an, Nullable<int> luna, Nullable<int> id_medic)
        {
            var anParameter = an.HasValue ?
                new ObjectParameter("an", an) :
                new ObjectParameter("an", typeof(int));
    
            var lunaParameter = luna.HasValue ?
                new ObjectParameter("luna", luna) :
                new ObjectParameter("luna", typeof(int));
    
            var id_medicParameter = id_medic.HasValue ?
                new ObjectParameter("id_medic", id_medic) :
                new ObjectParameter("id_medic", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalariiMedic_Result>("SalariiMedic", anParameter, lunaParameter, id_medicParameter);
        }
    
        public virtual ObjectResult<LoadPacientiAsistent_Result> LoadPacientiAsistent(Nullable<bool> azi, Nullable<int> unitateMedicalaId)
        {
            var aziParameter = azi.HasValue ?
                new ObjectParameter("azi", azi) :
                new ObjectParameter("azi", typeof(bool));
    
            var unitateMedicalaIdParameter = unitateMedicalaId.HasValue ?
                new ObjectParameter("unitateMedicalaId", unitateMedicalaId) :
                new ObjectParameter("unitateMedicalaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadPacientiAsistent_Result>("LoadPacientiAsistent", aziParameter, unitateMedicalaIdParameter);
        }
    }
}
